{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n// Robot configuration code.\ncontroller Controller = controller(primary);\nmotor left_motor1 = motor(PORT1, ratio18_1, false);\nmotor left_motor2 = motor(PORT2, ratio18_1, false);\nmotor_group left_motors = motor_group(left_motor1, left_motor2);\n\nmotor right_motor1 = motor(PORT3, ratio18_1, true);\nmotor right_motor2 = motor(PORT4, ratio18_1, true);\nmotor_group right_motors = motor_group(right_motor1, right_motor2);\n\nmotor lifting_arm1 = motor(PORT5, ratio36_1, true);\nmotor lifting_arm2 = motor(PORT6, ratio36_1, false);\nmotor_group lifiting_arms = motor_group(lifting_arm1,lifting_arm2);\n\nmotor wings =  motor(PORT7, ratio18_1,true);\nmotor catapult = motor (PORT8, ratio18_1,true );\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n\n\nvoid moveForward() {\nBrain.Screen.print(\"Move forward \");\nleft_motors.spin(reverse,100,percent);\nright_motors.spin(reverse,100,percent);\n\n}\n\nvoid moveBackward() {\nBrain.Screen.print(\"Move back \");\n left_motors.spin(forward,100,percent);\n right_motors.spin(forward,100,percent);\n}\n\nvoid moveLeft() {\n\n Brain.Screen.print(\"Move left \");\n left_motors.spin(forward,95,percent);\n right_motors.spin(reverse,95,percent);\n}\n\nvoid moveRight() {\n\n Brain.Screen.print(\"Move right \");\n left_motors.spin(reverse,95,percent);\n right_motors.spin(forward,95,percent);\n}\n\nvoid rightWhileForward() {\n   Brain.Screen.print(\"Move forward right \");\n    left_motors.spin(reverse,95,percent);\n    right_motors.spin(reverse,30,percent);\n}\n\nvoid leftWhileForward() {\n   Brain.Screen.print(\"Move left forward \");\n    left_motors.spin(reverse,30,percent);\n    right_motors.spin(reverse,95,percent);\n}\n\nvoid rightWhileBack() {\n   Brain.Screen.print(\"Move right while forward\");\n     left_motors.spin(forward, 30, percent);\n     right_motors.spin(forward, 95, percent);\n\n}\n\nvoid leftWhileBack() {\n    // brain.screen.print(\"Move left while forward\");\n     left_motors.spin(forward, 95, percent);\n    right_motors.spin(forward, 30, percent);\n }\n\nvoid moveForwardClaw(){\n  Brain.Screen.print(\"move claw up\");\n  lifiting_arms.spin(forward,50,percent);\n }\n\nvoid moveBackwardClaw(){\n  Brain.Screen.print(\"move claw down\");\n  lifiting_arms.spin(reverse,50,percent);\n }\n\n\n\nvoid openWings(){\n\n  if(wings.position(turns) < 4.5){\n     wings.spin(forward,120,percent);\n  } \n  else {\n    Brain.Screen.print(\"open wings else\");\n     wings.spin(forward,0,percent);\n  }\n\n\n  // if(wingsOpen){\n  //   Brain.Screen.print(\"opening wings\");\n  //  //wings.spinFor(forward,1080,degrees);\n  // }\n  //    Brain.Screen.print(\"closing wings\");\n  //   //wings.spinFor(reverse,1080,degrees);\n  // }\n} \n\nvoid closeWings(){\n   if(wings.position(turns) < 5 && wings.position(turns) > 0 ){\n     wings.spin(reverse,120,percent);\n  } \n  else {\n     Brain.Screen.print(\"close wings else\");\n     wings.spin(reverse,0,percent);\n  }\n}\n\n\n//basically when this will keep the the motor running backwards and we should be able to turn it off an on\nvoid launchCatapult(bool catapultOn){\n  if(catapultOn){\n     Brain.Screen.print(\"catapult On\");\ncatapult.spin(reverse,5,volt);\n  }\nelse{\n   Brain.Screen.print(\" catapultof\");\n  catapult.setStopping(coast);\n  catapult.stop();\n}\n}\n\nint main() {\n  \n  bool catapultOn = false;\n\n   while(true){\n\n  //   // first set off if statment should be used for movment\n  //   if (Controller.ButtonUp.pressing() && Controller.ButtonA.pressing()) {\n  //       rightWhileForward();\n  //   } else if (Controller.ButtonUp.pressing() && Controller.ButtonY.pressing()) {\n  //       leftWhileForward();\n  //   } else if (Controller.ButtonDown.pressing() && Controller.ButtonA.pressing()) {\n  //       rightWhileBack();\n  //   } else if (Controller.ButtonDown.pressing() && Controller.ButtonY.pressing()) {\n  //       leftWhileBack();\n  //   } else if (Controller.ButtonUp.pressing()) {\n  //       moveForward();\n  //       //Brain.screen.print(\"Up button pressed\");\n  //   } else if (Controller.ButtonDown.pressing()) {\n  //      // Brain.screen.print(\"Down button pressed\");\n  //       moveBackward();\n  //   } else if (Controller.ButtonY.pressing()) {\n  //      // Brain.screen.print(\"Y button pressed\");\n  //       moveLeft();\n  //   } else if (Controller.ButtonA.pressing()) {\n  //      // Brain.screen.print(\"A button pressed\");\n  //       moveRight();\n  //      } else {\n  //   left_motors.setStopping(brake);\n  //   right_motors.setStopping(brake);\n  //   wings.setStopping(hold);\n  //   left_motors.stop();\n  //   right_motors.stop();\n  //   }\n/////////////////////////////////////////////////////////////\n\n\n  if (Controller.Axis1.position() > 0 && )\n  else if(Controller.Axis3.position() > 0 || Controller.Axis3.position() < 0 ){\n   right_motors.spin(reverse,Controller.Axis3.position(),percent);\n   left_motors.spin(reverse,Controller.Axis3.position(),percent);\n }\n else if(Controller.Axis1.position() > 0 ||  Controller.Axis1.position() < 0 ){\n     right_motors.spin(forward,Controller.Axis1.position(),percent);\n   left_motors.spin(reverse,Controller.Axis1.position(),percent);\n }\n       else {\n    left_motors.setStopping(brake);\n    right_motors.setStopping(brake);\n    wings.setStopping(hold);\n    left_motors.stop();\n    right_motors.stop();\n    }\n\n\n/////////////////////////////////////////////////////////////////\n\n\n\n    //set of if statments for the wings and the catapult and moving the claw\n    if (Controller.ButtonL2.pressing()) {\n      closeWings();\n    } else if (Controller.ButtonR2.pressing()) {\n      openWings();\n    }\n    else if(Controller.ButtonRight.pressing()){ // need to test this with the catapult\n    catapultOn = !catapultOn;\n    launchCatapult(catapultOn);\n    } \n    else if( Controller.ButtonR1.pressing()){\n    moveForwardClaw();\n    }\n    else if(Controller.ButtonL1.pressing()){\n    moveBackwardClaw();\n    }\n    else {\n    wings.stop();\n    lifiting_arms.stop(); \n    }\n  }\n  return 0; \n}\n","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1,2],"name":"MotorGroup1","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"},"triportSourcePort":22},{"port":[3,4],"name":"MotorGroup3","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.5","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}