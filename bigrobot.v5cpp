{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n#include \"vex.h\"\n\nusing namespace vex;\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n// void playVexcodeSound(const char *soundName) {\n//   printf(\"VEXPlaySound:%s\\n\", soundName);\n//   wait(5, msec);\n// }\n\ncontroller Controller = controller(primary);\n\nmotor left_motor1 = motor(PORT1, ratio18_1, false);\nmotor left_motor2 = motor(PORT8, ratio18_1, false);\nmotor_group left_motors = motor_group(left_motor1, left_motor2);\n\nmotor right_motor1 = motor(PORT2, ratio18_1, true);\nmotor right_motor2 = motor(PORT9, ratio18_1, true);\nmotor_group right_motors = motor_group(right_motor1, right_motor2);\n\ndrivetrain all_motors = drivetrain(left_motors, right_motors);\n\noptical Optical5 = optical(PORT5);\n\n//public bool vex::motor::spinFor(directionType dir, double time, timeUnits units, double velocity, velocityUnits units_v)\n\nvoid MoveForward(int x) {\n\n    Brain.Screen.print(\"move forward \");\n    //all_motors.driveFor(forward,x,inches,143,rpm);\n    //all_motors.drive(forward);\n    right_motors.spin(forward,95,percent);\n    left_motors.spin(reverse,95,percent);\n    \n\n\n}\n\nvoid MoveBackward(int x) {\n    // left_motors.spin(reverse,x,volt);\n    // right_motors.spin(reverse,x,volt);\nBrain.Screen.print(\"move back\" + x);\n\n    left_motors.spinFor(forward, x, sec, 5, rpm);\n    right_motors.spinFor(forward, x, sec, 143, rpm);\n}\n\nvoid Rotate(int x) {\n    //left_motors.spinFor(forward, x, sec, 5, rpm);\n    right_motors.spinFor(reverse, x, sec, 143, rpm);\n}\n\nvoid RotateLeft(int x) {\n  Brain.Screen.print(\"rotate left\" + x);\n    Rotate(-x);\n}\n\nvoid RotateRight(int x) {\n  Brain.Screen.print(\"rotate right\" + x);\n    Rotate(x);\n}\n\nvoid Stop() {\n    all_motors.stop();\n}\n\nint main() {\n    MoveForward(100);\n    Stop();\n    return 0;\n}\n\n","textLanguage":"cpp","rconfig":[],"slot":7,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.5","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}