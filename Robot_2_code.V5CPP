Robot2 Code

#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>

#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS

// Robot configuration code.
controller Controller = controller(primary);
motor left_motor1 = motor(PORT1, ratio18_1, false);
motor right_motor1 = motor(PORT2, ratio18_1, true);
motor wings =  motor(PORT3, ratio18_1,true);
motor infeedSystem = motor(PORT4, ratio18_1,true); 

// Helper to make playing sounds from the V5 in VEXcode easier and
// keeps the code cleaner by making it clear what is happening.
void playVexcodeSound(const char *soundName) {
  printf("VEXPlaySound:%s\n", soundName);
  wait(5, msec);
}



// define variable for remote controller enable/disable
bool RemoteControlCodeEnabled = true;

#pragma endregion VEXcode Generated Robot Configuration

/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       {author}                                                  */
/*    Created:      {date}                                                    */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// Include the V5 Library
#include "vex.h"
  
// Allows for easier use of the VEX Library
using namespace vex;

void openWings(){

  if(wings.position(turns) < 4.5){
     wings.spin(forward,120,percent);
  } 
  else {
    Brain.Screen.print("open wings else");
     wings.spin(forward,0,percent);
  }
}

void closeWings(){
   if(wings.position(turns) < 5 && wings.position(turns) > 0 ){
     wings.spin(reverse,120,percent);
  } 
  else {
     Brain.Screen.print("close wings else");
     wings.spin(reverse,0,percent);
  }
}

void infeedSystemForward(){
   Brain.Screen.print("infeed forward ");
 infeedSystem.spin(forward,95,percent);
}

void infeedSystemReverse(){
   Brain.Screen.print("infeed reverse ");
 infeedSystem.spin(reverse,95,percent);
}

void infeedSystemStop(){
   infeedSystem.spin(reverse,0,percent);
}

//!!!!This could be changed to take advantage of the driveTrain function driveFor()!!!!
void moveForward(int distance){
  right_motor1.spin(reverse,100,percent);
  left_motor1.spin(reverse,100,percent);
  wait(distance, sec);
  
  //Stop motors
  right_motor1.spin(reverse,0,percent);
  left_motor1.spin(reverse,0,percent);
}
void moveBack(int distance){
  right_motor1.spin(reverse,-100,percent);
  left_motor1.spin(reverse,-100,percent);
  wait(distance, sec);
  
  //Stop motors
  right_motor1.spin(reverse,0,percent);
  left_motor1.spin(reverse,0,percent);
}

void turnRight(int degrees){
  //Use GPS to track rotation of robot

  //Stop motors
  right_motor1.spin(reverse,0,percent);
  left_motor1.spin(reverse,0,percent);
}

void turnLeft(int degrees){
  //Use GPS to track rotation of robot

  //Stop motors
  right_motor1.spin(reverse,0,percent);
  left_motor1.spin(reverse,0,percent);
}

void grabTriball(){
  infeedSystemForward()
  wait(1, sec);
  infeedSystemStop()
}

void releaseTriball(){
  infeedSystemReverse()
  wait(1, sec);
  infeedSystemStop()
}

//Code for the autonomous portion
void autonomousMode(){
    //Robot moves to the side of our goal
      moveForward(10);
      turnLeft(45);
      moveForward(10);
      turnLeft(45);
      moveForward(5);

    //Scores initial triball
      releaseTriball()

    //Move to alliance triball 
      turnLeft(160);
      moveForward(5);
      turnLeft(80);
      moveForward(5);

    //Grab alliance triball 
      grabTriball();

    //Move to goal
      turnLeft(100);
      moveForward(10);

    //Score alliance triball
      releaseTriball();

    //Move to defend 
      moveBack(3);
      turnLeft(90);
      moveForward(5);

    //Defense strategy
      ????

    //Move to touch elevation bar
}


int main() {
  
  bool catapultOn = false;
  bool TakeTryBallIn = true; 

   while(true){

if (Controller.Axis1.position() > 0 && (Controller.Axis3.position() > 0 ||  Controller.Axis3.position() < 0))
  {
    right_motor1.spin(reverse,Controller.Axis3.position() * (115 - Controller.Axis1.position()) * 0.01,percent);
    left_motor1.spin(reverse,Controller.Axis3.position(),percent);
  }
  else if (Controller.Axis1.position() < 0 && (Controller.Axis3.position() > 0 ||  Controller.Axis3.position() < 0))
  {
    left_motor1.spin(reverse,Controller.Axis3.position() * (115 + Controller.Axis1.position()) * 0.01,percent);
    right_motor1.spin(reverse,Controller.Axis3.position(),percent);
    
  }
//forwads and backwards
  else if(Controller.Axis3.position() > 0 || Controller.Axis3.position() < 0 ){
   right_motor1.spin(reverse,Controller.Axis3.position(),percent);
   left_motor1.spin(reverse,Controller.Axis3.position(),percent);
 }

 //move left and right 
 else if(Controller.Axis1.position() > 0 ||  Controller.Axis1.position() < 0 ){
     right_motor1.spin(forward,Controller.Axis1.position(),percent);
   left_motor1.spin(reverse,Controller.Axis1.position(),percent);
 }
       else {
    left_motor1.setStopping(brake);
    right_motor1.setStopping(brake);
    wings.setStopping(hold);
    left_motor1.stop();
    right_motor1.stop();
    }

/////////////////////////////////////////////////////////////////


    //set of if statments for the wings sepereate to allow for opening wings while moving
    if (Controller.ButtonL2.pressing()) {
      closeWings();
    } else if (Controller.ButtonR2.pressing()) {
      openWings();
    }else {
    wings.stop();
    }

    if (Controller.ButtonL1.pressing()){
      infeedSystemReverse();
    } else if(Controller.ButtonR1.pressing()){
      infeedSystemForward();
    }else{ 
      infeedSystem.setStopping(brake);
      infeedSystem.stop();
    }
//////////////////////////////////////////////////////////////////////


 return 0; 


  }
}
