#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


// Robot configuration code.




// Helper to make playing sounds from the V5 in VEXcode easier and
// keeps the code cleaner by making it clear what is happening.
void playVexcodeSound(const char *soundName) {
  printf("VEXPlaySound:%s\n", soundName);
  wait(5, msec);
}

#pragma endregion VEXcode Generated Robot Configuration
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>
#include "vex.h"

using namespace vex;

// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS

// void playVexcodeSound(const char *soundName) {
//   printf("VEXPlaySound:%s\n", soundName);
//   wait(5, msec);
// }

controller Controller = controller(primary);

motor left_motor1 = motor(PORT1, ratio18_1, false);
motor left_motor2 = motor(PORT8, ratio18_1, false);
motor_group left_motors = motor_group(left_motor1, left_motor2);
motor right_motor1 = motor(PORT2, ratio18_1, true);
motor right_motor2 = motor(PORT9, ratio18_1, true);
motor_group right_motors = motor_group(right_motor1, right_motor2);
drivetrain all_motors = drivetrain(left_motors, right_motors);

//public bool vex::motor::spinFor(directionType dir, double time, timeUnits units, double velocity, velocityUnits units_v)

void Arm_Raise() {
  // TBD code
}
void Arm_Lower() {
  // TBD code
}
void Catapault_Launch() {
  // TBD code
}

void Wheels_MoveForward(int x) { 
  all_motors.driveFor(forward,x,inches,143,rpm); 
}
void Wheels_MoveBackward(int x) { 
  all_motors.driveFor(forward,x,inches,143,rpm); 
}
void Wheels_RotateLeft(int x) { 
  all_motors.turnFor(left,x,degrees); 
}
void Wheels_RotateRight(int x) { 
  all_motors.turnFor(right,x,degrees); 
}
void Wheels_Stop() { 
  all_motors.stop(); 
}

void autonomous_code() {
    //Move to middle barrier
    Wheels_MoveForward(10);
  //Throw initial triball using catapult
    Catapault_Launch();

  //Move to alliance triball
    Wheels_MoveBackward(7);
    Wheels_RotateRight(120);
    Wheels_MoveForward(10);
  //Grab alliance triball
    //Extend grabber arm
    Wheels_MoveBackward(2);
    Wheels_RotateRight(30);

  //Move to side of goal 
    Wheels_MoveForward(5);

  //Score alliance triball
    //Raise grabber arm
    Wheels_MoveForward(2);
  //Move towards dropped triball
    Wheels_MoveBackward(2);
    Wheels_RotateRight(135);
    Wheels_MoveForward(10);
  //Pickup dropped triball
    //Extend grabber arm
    Wheels_RotateRight(180);
  //Move towards side goal
    Wheels_MoveForward(10);

  //Score second triball
    //Raise grabber arm
    Wheels_MoveForward(2)

  //Other
    //????

  //Return to pole
}

int main(){ 
  autonomous_code();
  return 0;
}