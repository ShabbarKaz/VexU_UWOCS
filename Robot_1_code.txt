#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS

// Robot configuration code.
controller Controller = controller(primary);
motor left_motor1 = motor(PORT2, ratio18_1, false);
motor left_motor2 = motor(PORT8, ratio18_1, false);
motor_group left_motors = motor_group(left_motor1, left_motor2);

motor right_motor1 = motor(PORT1, ratio18_1, true);
motor right_motor2 = motor(PORT9, ratio18_1, true);
motor_group right_motors = motor_group(right_motor1, right_motor2);

motor lifting_arm1 = motor(PORT10, ratio36_1, true);
motor lifting_arm2 = motor(PORT20, ratio36_1, false);
motor_group lifiting_arms = motor_group(lifting_arm1,lifting_arm2);
motor catapult = motor (PORT5, ratio18_1,true );





// Helper to make playing sounds from the V5 in VEXcode easier and
// keeps the code cleaner by making it clear what is happening.
void playVexcodeSound(const char *soundName) {
  printf("VEXPlaySound:%s\n", soundName);
  wait(5, msec);
}



// define variable for remote controller enable/disable
bool RemoteControlCodeEnabled = true;

#pragma endregion VEXcode Generated Robot Configuration

/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       {author}                                                  */
/*    Created:      {date}                                                    */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------
 Wiring guide robot 1 :
front left motor : PORT2
front right motor : PORT1 
back left motor : PORT8
back right motor : PORT9
claws : PORT10 PORT20
catapult: PORT5 
---------------------------------------------------------------------------------*/




// Include the V5 Library
#include "vex.h"
  
// Allows for easier use of the VEX Library
using namespace vex;


void moveForwardClaw(){
  if(lifiting_arms.position(turns) < 2){
    Brain.Screen.print("move claw up");
    lifiting_arms.spin(forward,50,percent);
  }
 }

void moveBackwardClaw(){
  if(lifiting_arms.position(turns) > 0){
    Brain.Screen.print("move claw down");
    lifiting_arms.spin(reverse,50,percent);
  }
 }



int main() {  
bool toggle = false;
bool latch = false;


   while(true){
/*<--------------------------Movement----------------------->*/
if (Controller.Axis1.position() > 0 && (Controller.Axis3.position() > 0 ||  Controller.Axis3.position() < 0))
  {
    right_motors.spin(reverse,Controller.Axis3.position() * (115 - Controller.Axis1.position()) * 0.01,percent);
    left_motors.spin(reverse,Controller.Axis3.position(),percent);
  }
  else if (Controller.Axis1.position() < 0 && (Controller.Axis3.position() > 0 ||  Controller.Axis3.position() < 0))
  {
    left_motors.spin(reverse,Controller.Axis3.position() * (115 + Controller.Axis1.position()) * 0.01,percent);
    right_motors.spin(reverse,Controller.Axis3.position(),percent);
    
  }//forwads and backwards
  else if(Controller.Axis3.position() > 0 || Controller.Axis3.position() < 0 ){
   right_motors.spin(reverse,Controller.Axis3.position(),percent);
   left_motors.spin(reverse,Controller.Axis3.position(),percent);
 }
 //move left and right 
 else if(Controller.Axis1.position() > 0 ||  Controller.Axis1.position() < 0 ){
     right_motors.spin(forward,Controller.Axis1.position(),percent);
   left_motors.spin(reverse,Controller.Axis1.position(),percent);
 } else {
    left_motors.setStopping(brake);
    right_motors.setStopping(brake);
    left_motors.stop();
    right_motors.stop();
    }

/*<--------------------------Movement----------------------->*/


/*<--------------------------AddOns----------------------->*/

    //set of if statments for the wings and the catapult and moving the claw
   
    if( Controller.ButtonL1.pressing() || Controller.ButtonR1.pressing()){
    moveForwardClaw();
    }
    else if(Controller.ButtonL2.pressing() || Controller.ButtonR2.pressing() ){
    moveBackwardClaw();
    }
    else {
    lifiting_arms.setStopping(brake);
    lifiting_arms.stop(); 
    }

    
/*<--------------------------catapult----------------------->*/

if(Controller.ButtonLeft.pressing()){
  latch = toggle;
  toggle =!toggle; 
}


  if (latch){
    catapult.spin(forward,100,percent);
  } else {
    catapult.stop();
  }

      
/*<--------------------------catapult----------------------->*/

  }
  
/*<--------------------------AddOns----------------------->*/
  return 0; 
}
