#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>
#include "vex.h"

using namespace vex;

brain Brain;

// Brain should be defined by default

controller Controller = controller(primary);
motor left_motor = motor(PORT1, ratio18_1, false);
motor right_motor = motor(PORT2, ratio18_1, true);
drivetrain all_motors = drivetrain(left_motor, right_motor, 319.19, 279.4, 152.4, mm, 0.714285714);
motor infeed_motor = motor(PORT4, ratio18_1,true); 
motor arm = motor(PORT7, ratio18_1,true);
optical Optical5 = optical(PORT5);

gps GPS = gps(PORT8, 80.00, -240.00, mm, 180);

// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS
void calibrateDrivetrain() {
  wait(200, msec);
  Brain.Screen.print("Calibrating");
  Brain.Screen.newLine();
  Brain.Screen.print("GPS");
  GPS.calibrate();
  while (GPS.isCalibrating()) {
    wait(25, msec);
  }
  Brain.Screen.clearScreen();
  Brain.Screen.setCursor(1, 1);
}

// Helper to make playing sounds from the V5 in VEXcode easier and
// keeps the code cleaner by making it clear what is happening.
void playVexcodeSound(const char *soundName) {
  printf("VEXPlaySound:%s\n", soundName);
  wait(5, msec);
}

// char sectors[6][6][2] = {{"B1","B2","B3","C3","C2","C1"},
//                         {"B4","B5","B6","C6","C5","C4"},
//                         {"B7","B8","B9","C9","C8","C7"},
//                         {"A7","A8","A9","D9","D8","D7"},
//                         {"A4","A5","A6","D6","D5","D4"},
//                         {"A1","A2","A3","D3","D2","D1"}};

// void GPS_GetSector() {
//   return sectors[GPS.xPosition(mm)/30][GPS.xPosition(mm)/30];
// }

// Brain methods
void Brain_Print() { Brain.Screen.print("X"); }

void Arm_Raise() {
  arm.spinTo(-1, deg);
  arm.stop();
}
void Arm_Lower() {
  arm.spinTo(260, deg);
  arm.stop();
}

// Infeed methods
void Infeed_Collect(){ 
  infeed_motor.spin(forward,95,percent); 
}
void Infeed_Release(){ 
  infeed_motor.spin(reverse,95,percent);
}
void Infeed_Stop() { 
  infeed_motor.stop(); 
}

// Wheel methods
void Wheels_MoveForward(int length, int speed, bool waitfor) { 
  all_motors.driveFor(forward,length,inches,speed,rpm,waitfor); 
}
void Wheels_MoveBackward(int length, int speed, bool waitfor) { 
  all_motors.driveFor(reverse,length,inches,speed,rpm,waitfor); 
}
void Wheels_RotateLeft(int length, int speed, bool waitfor) { 
  all_motors.turnFor(left,length*(325.0/365),degrees,speed,rpm,waitfor); 
}
void Wheels_RotateRight(int length, int speed, bool waitfor) { 
  all_motors.turnFor(right,length*(325.0/365),degrees,speed,rpm,waitfor); 
}
void Wheels_Stop() { 
  all_motors.stop(); 
}

void autonomous_code() {

    Infeed_Release();
    Wheels_MoveBackward(10,143,true);
    Infeed_Stop();
    Wheels_MoveBackward(40,143,true);

    Wheels_RotateLeft(90,143,true);

    // Wheels_MoveForward(10,143,true);
    // Infeed_Collect();
    // Wheels_MoveForward(10,143,true);
    // Infeed_Stop();
    // Wheels_MoveForward(30,143,true);

    // Wheels_RotateRight(45,143,true);
    // Wheels_MoveForward(20,143,true);
    // Wheels_RotateRight(45,143,true);
    // Wheels_MoveForward(5,143,true);
    // Infeed_Release();
    // Wheels_MoveBackward(15,143,true);


    // Wheels_RotateRight(160,143,true);
    // Wheels_MoveForward(10,143,true);
    // Wheels_RotateRight(80,143,true);
    // Wheels_MoveForward(20,143,true);

    // Arm_Lower();
    // Wheels_MoveBackward(20,143,true);
    // Arm_Raise();
    // Wheels_MoveForward(10,143,true);
    // Wheels_RotateRight(45,143,true);
    // Wheels_MoveForward(10,143,true);
    // Wheels_RotateRight(45,143,true);
    // Wheels_MoveForward(10,143,true);
    // Infeed_Release();
    // Wheels_MoveBackward(15,143,true);


    // //   Wheels_RotateLeft(160);
    // //   Wheels_MoveForward(5);
    // //   Wheels_RotateLeft(80);
    // //   Wheels_MoveForward(5);

    // // //Grab alliance triball 
    // //   Infeed_Collect();

    // // //Move to goal
    // //   Wheels_RotateLeft(100);
    // //   Wheels_MoveForward(10);

    // // //Score alliance triball
    // //   Infeed_Release();

    // // //Move to defend 
    // //   Wheels_MoveBackward(3);
    // //   Wheels_RotateLeft(90);
    // //   Wheels_MoveForward(5);

    // // //Defense strategy
    // //   // Repeat the strategy of:
    // //   // Rotate to general direction of triball
    // //   // Move to the triball
    // //   // Activate the infeed
    // //   // Rotate to the goal
    // //   // Move to the goal
    // //   // Release the triball
    // //   // Rotate 180 degrees
    // //   // Repeat.

    // // //Move to touch elevation bar
    // //   // ????
}

int main() {
  autonomous_code();
  return 0;
}